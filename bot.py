import asyncio
import logging
import os
import sys

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD')

WEBHOOK_URL = os.environ.get('WEBHOOK_URL', "https://test-1-1-zard.onrender.com")

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    sys.exit(1)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
ADMIN_IDS = set()
banned_users = set()
user_agreements = {}
user_interests = {}
waiting_users = []
active_chats = {}
reported_users = {}
search_timeouts = {}
show_name_requests = {}
referrals = {}
invited_by = {}

AVAILABLE_INTERESTS = ["–ú—É–∑—ã–∫–∞", "–ò–≥—Ä—ã", "–ö–∏–Ω–æ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–ø–æ—Ä—Ç", "–ö–Ω–∏–≥–∏"]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    if update and update.effective_chat:
        logging.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É –≤ —á–∞—Ç–µ {update.effective_chat.id}")


# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                referrals.setdefault(referrer_id, 0)
                referrals[referrer_id] += 1
                invited_by[user_id] = referrer_id
                await context.bot.send_message(
                    referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!"
                )
                logging.info(f"User {user_id} (@{username}) was invited by {referrer_id}")
        except (ValueError, IndexError):
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")

    if user_agreements.get(user_id):
        await show_main_menu(user_id, context)
        return

    agreement_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    keyboard = [[KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")]]
    await update.message.reply_text(agreement_text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))


async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


async def show_chat_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    keyboard = [
        ["üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"],
        ["üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–∏–∫", "üôà –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(user_id, "–í—ã –≤ —á–∞—Ç–µ. –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=markup)


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id in banned_users:
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    if text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω" and not user_agreements.get(user_id):
        user_agreements[user_id] = True
        await update.message.reply_text("‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(user_id, context)
        return

    if not user_agreements.get(user_id):
        await update.message.reply_text("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    if context.user_data.get('awaiting_interests'):
        if text in AVAILABLE_INTERESTS:
            user_interests.setdefault(user_id, [])
            if text in user_interests[user_id]:
                user_interests[user_id].remove(text)
                await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–µ—Å '{text}' —É–±—Ä–∞–Ω. –¢–µ–∫—É—â–∏–µ: {', '.join(user_interests[user_id]) or '–ù–µ—Ç'}")
            else:
                user_interests[user_id].append(text)
                await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–µ—Å '{text}' –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∏–µ: {', '.join(user_interests[user_id])}")
            return
        elif text == "‚û°Ô∏è –ì–æ—Ç–æ–≤–æ":
            del context.user_data['awaiting_interests']
            await update.message.reply_text(
                f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_interests.get(user_id, [])) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=ReplyKeyboardRemove()
            )
            await start_search(user_id, context)
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        await context.bot.send_message(partner_id, text)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞" or text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
        if user_id in waiting_users:
            await update.message.reply_text("‚è≥ –ü–æ–∏—Å–∫ —É–∂–µ –∏–¥—ë—Ç...")
        else:
            await show_interests_menu(user_id, context)
    
    elif text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        await report_issue(user_id, update.effective_user.username, context)

    elif text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
        await end_chat(user_id, context)
        
    elif text == "üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–∏–∫":
        await handle_show_name_request(user_id, context, agree=True)
    
    elif text == "üôà –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫":
        await handle_show_name_request(user_id, context, agree=False)
        
    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        await show_referrals(user_id, context)
    
    else:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")


async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã, –≥–æ–ª–æ—Å–æ–≤—ã–µ)."""
    user_id = update.effective_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        await context.bot.forward_message(
            chat_id=partner_id,
            from_chat_id=user_id,
            message_id=update.message.message_id
        )


async def show_interests_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤."""
    keyboard = [[KeyboardButton(interest)] for interest in AVAILABLE_INTERESTS]
    keyboard.append([KeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ")])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    user_interests[user_id] = []
    await context.bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=markup
    )
    context.user_data['awaiting_interests'] = True


async def start_search(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."""
    waiting_users.append(user_id)
    
    job = context.application.job_queue.run_once(
        search_timeout_callback,
        120,
        chat_id=user_id,
        name=str(user_id)
    )
    search_timeouts[user_id] = job
    
    await find_partner(context)


async def find_partner(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò—â–µ—Ç –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if len(waiting_users) >= 2:
        user1_id = waiting_users.pop(0)
        user2_id = waiting_users.pop(0)

        if user1_id in search_timeouts:
            search_timeouts.pop(user1_id).job.schedule_removal()
        if user2_id in search_timeouts:
            search_timeouts.pop(user2_id).job.schedule_removal()
            
        active_chats[user1_id] = user2_id
        active_chats[user2_id] = user1_id
        show_name_requests[tuple(sorted((user1_id, user2_id)))] = {user1_id: None, user2_id: None}
        
        await show_chat_menu(user1_id, context)
        await show_chat_menu(user2_id, context)
        
async def search_timeout_callback(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞."""
    user_id = context.job.chat_id
    if user_id in waiting_users:
        waiting_users.remove(user_id)
        search_timeouts.pop(user_id, None)
        await context.bot.send_message(
            user_id,
            "‚è≥ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
        await show_main_menu(user_id, context)


async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç."""
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)
        
        chat_key = tuple(sorted((user_id, partner_id)))
        show_name_requests.pop(chat_key, None)
        
        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        
        await show_main_menu(user_id, context)
        await show_main_menu(partner_id, context)
    else:
        await context.bot.send_message(user_id, "‚ùóÔ∏è–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")
        

async def report_issue(user_id: int, username: str, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω–∞–º."""
    if user_id not in active_chats:
        await context.bot.send_message(user_id, "‚ùóÔ∏è –í—ã –Ω–µ –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É.")
        return

    partner_id = active_chats[user_id]
    reported_users[user_id] = partner_id
    
    await context.bot.send_message(user_id, "‚ö†Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—é.")
    
    for admin_id in ADMIN_IDS:
        await context.bot.send_message(
            admin_id,
            f"‚ùó **–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!**\n"
            f"–ü–æ–∂–∞–ª–æ–≤–∞–ª—Å—è: `{user_id}` (–Ω–∏–∫: @{username})\n"
            f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{partner_id}`",
            parse_mode='Markdown'
        )

async def handle_show_name_request(user_id: int, context: ContextTypes.DEFAULT_TYPE, agree: bool) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–∫–∞–∑ –Ω–∏–∫–∞."""
    if user_id not in active_chats:
        await context.bot.send_message(user_id, "‚ùóÔ∏è–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    partner_id = active_chats[user_id]
    chat_key = tuple(sorted((user_id, partner_id)))

    show_name_requests[chat_key][user_id] = agree
    partner_agree = show_name_requests[chat_key][partner_id]

    if partner_agree is None:
        await context.bot.send_message(user_id, "‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    elif agree and partner_agree:
        user = await context.bot.get_chat(user_id)
        name1 = f"@{user.username}" if user.username else '–ë–µ–∑ –Ω–∏–∫–∞'
        name2_user = await context.bot.get_chat(partner_id)
        name2 = f"@{name2_user.username}" if name2_user.username else '–ë–µ–∑ –Ω–∏–∫–∞'

        await context.bot.send_message(user_id, f"üîì –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name2}")
        await context.bot.send_message(partner_id, f"üîì –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name1}")
    else:
        await context.bot.send_message(user_id, "‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫.")
        await context.bot.send_message(partner_id, "‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫.")


async def show_referrals(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    referral_count = referrals.get(user_id, 0)
    bot_info = await context.bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start={user_id}"
    await context.bot.send_message(
        user_id,
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: `{referral_link}`\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: `{referral_count}`",
        parse_mode='Markdown'
    )


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(user_id, context)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=ReplyKeyboardRemove())
        context.user_data['awaiting_admin_password'] = True

async def password_check_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç."""
    if context.user_data.get('awaiting_admin_password'):
        user_id = update.effective_user.id
        if update.message.text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
            await show_admin_menu(user_id, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        del context.user_data['awaiting_admin_password']
    elif user_id in ADMIN_IDS:
        await admin_menu_handler(update, context)
    else:
        await message_handler(update, context)


async def show_admin_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ôªÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã"],
        ["üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å", "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å"],
        ["üîê –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(user_id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=markup)


async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    user_id = update.effective_user.id
    text = update.message.text
    
    if "awaiting_ban_id" in context.user_data:
        try:
            target_id = int(text)
            banned_users.add(target_id)
            await context.bot.send_message(target_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` –∑–∞–±–∞–Ω–µ–Ω.")
        except (ValueError, Exception):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            del context.user_data["awaiting_ban_id"]
        return
        
    if "awaiting_unban_id" in context.user_data:
        try:
            target_id = int(text)
            if target_id in banned_users:
                banned_users.remove(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
        except (ValueError, Exception):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            del context.user_data["awaiting_unban_id"]
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–∏–ª–æ—Å—å: {len([u for u in user_agreements.values() if u])}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(active_chats)//2}\n"
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reported_users)}\n"
            f"‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}\n"
            f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sum(referrals.values())}"
        )
    elif text == "‚ôªÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã":
        active_chat_users = list(active_chats.keys())
        for uid in active_chat_users:
            if uid in active_chats:
                await end_chat(uid, context)
        await update.message.reply_text("üîÑ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    elif text == "üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å:")
        context.user_data["awaiting_ban_id"] = True
    elif text == "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å:")
        context.user_data["awaiting_unban_id"] = True
    elif text == "üîê –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        ADMIN_IDS.discard(user_id)
        await update.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–æ–≤."""
    PORT = int(os.environ.get('PORT', 5000))
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('admin', admin_command))

    # –û–¥–∏–Ω –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), password_check_handler))
    
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE | filters.Sticker.ALL, media_handler))
    
    app.add_error_handler(error_handler)
    
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
    )


if __name__ == '__main__':
    main()
