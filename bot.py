from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import asyncio
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD')
ADMIN_IDS = set()

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    import sys
    sys.exit(1)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
waiting_users = []
active_chats = {}
show_name_requests = {}
user_agreements = {}
reported_users = set()

# ========== –°–¢–ê–†–¢ –ò –°–û–ì–õ–ê–°–ò–ï ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_agreements[user_id] = False
    agreement_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(agreement_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def agree_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_agreements[user_id] = True
    await query.edit_message_text("‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    await show_main_menu(update, user_id)

async def show_main_menu(update, user_id):
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# ========== –ü–û–ò–°–ö –ò –ß–ê–¢ ==========
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if not user_agreements.get(user_id, False):
        await update.message.reply_text("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if user_id in ADMIN_IDS:
        await admin_menu_handler(update, context)
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        await context.bot.send_message(partner_id, text)
        return

    # –ö–æ–º–∞–Ω–¥—ã
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        if user_id in waiting_users:
            await update.message.reply_text("‚è≥ –ü–æ–∏—Å–∫ —É–∂–µ –∏–¥—ë—Ç...")
            return
        waiting_users.append(user_id)
        await update.message.reply_text("üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        await find_partner(context)
    elif text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        reported_users.add(user_id)
        await update.message.reply_text("‚ö†Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—é.")
    elif text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
        await end_chat(user_id, context)
    elif text == "üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–∏–∫":
        await handle_show_name_request(user_id, context, agree=True)
    elif text == "üôà –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫":
        await handle_show_name_request(user_id, context, agree=False)
    else:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def find_partner(context):
    if len(waiting_users) >= 2:
        user1 = waiting_users.pop(0)
        user2 = waiting_users.pop(0)
        active_chats[user1] = user2
        active_chats[user2] = user1
        show_name_requests[(user1, user2)] = {user1: None, user2: None}

        markup = ReplyKeyboardMarkup(
            [["üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"], ["üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–∏–∫", "üôà –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫"]],
            resize_keyboard=True
        )
        await context.bot.send_message(user1, "üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=markup)
        await context.bot.send_message(user2, "üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=markup)

async def handle_show_name_request(user_id, context, agree):
    if user_id not in active_chats:
        await context.bot.send_message(user_id, "‚ùóÔ∏è–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    partner_id = active_chats[user_id]
    chat_key = tuple(sorted((user_id, partner_id)))

    if chat_key not in show_name_requests:
        await context.bot.send_message(user_id, "‚ùóÔ∏è–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    show_name_requests[chat_key][user_id] = agree
    other = show_name_requests[chat_key][partner_id]

    if other is None:
        await context.bot.send_message(user_id, "‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    elif agree and other:
        name1 = f"@{(await context.bot.get_chat(user_id)).username or '–ë–µ–∑ –Ω–∏–∫–∞'}"
        name2 = f"@{(await context.bot.get_chat(partner_id)).username or '–ë–µ–∑ –Ω–∏–∫–∞'}"
        await context.bot.send_message(user_id, f"üîì –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name2}")
        await context.bot.send_message(partner_id, f"üîì –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name1}")
    else:
        await context.bot.send_message(user_id, "‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫.")
        await context.bot.send_message(partner_id, "‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫.")

async def end_chat(user_id, context):
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)
        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(None, user_id)
        await show_main_menu(None, partner_id)
    else:
        await context.bot.send_message(user_id, "‚ùóÔ∏è–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")

# ========== –ê–î–ú–ò–ù–ö–ê ==========
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(update)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        context.user_data['awaiting_admin_password'] = True

async def password_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_admin_password'):
        if update.message.text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(update.effective_user.id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
            await show_admin_menu(update)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data['awaiting_admin_password'] = False

async def show_admin_menu(update: Update):
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ôªÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã"],
        ["üîê –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=markup)

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return

    text = update.message.text

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–∏–ª–æ—Å—å: {len([u for u in user_agreements.values() if u])}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(active_chats)//2}\n"
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reported_users)}"
        )
    elif text == "‚ôªÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã":
        for uid in list(active_chats.keys()):
            await end_chat(uid, context)
        await update.message.reply_text("üîÑ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    elif text == "üîê –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        ADMIN_IDS.discard(user_id)
        await update.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == '__main__':
    if not BOT_TOKEN or not ADMIN_PASSWORD:
        logging.error("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        import sys
        sys.exit(1)
    else:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ —Ç–≤–æ–µ–º —Ä–∞–±–æ—á–µ–º –ø–æ—Ä—è–¥–∫–µ
        app.add_handler(CommandHandler('start', start))
        app.add_handler(CommandHandler('admin', admin_command))
        
        app.add_handler(CallbackQueryHandler(agree_callback))
        
        # –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), password_handler))
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

        app.run_polling()
