from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.ext.filters import BaseFilter
import asyncio
import logging
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD')
WEBHOOK_URL = "https://test-1-1-zard.onrender.com"  # <-- –í–ê–® –≤–µ–±—Ö—É–∫

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    sys.exit(1)

ADMIN_IDS = set()
waiting_users = []
active_chats = {}
show_name_requests = {}
user_agreements = {}
banned_users = set()
reported_users = {}
search_timeouts = {}
user_interests = {}
available_interests = ["–ú—É–∑—ã–∫–∞", "–ò–≥—Ä—ã", "–ö–∏–Ω–æ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–ø–æ—Ä—Ç", "–ö–Ω–∏–≥–∏"]
referrals = {}
invited_by = {}

# === –§–∏–ª—å—Ç—Ä ===
class NotAdminFilter(BaseFilter):
    def filter(self, message):
        return message.from_user.id not in ADMIN_IDS

not_admin_filter = NotAdminFilter()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("–û—à–∏–±–∫–∞: %s", context.error)

# === Start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                referrals.setdefault(referrer_id, 0)
                referrals[referrer_id] += 1
                invited_by[user_id] = referrer_id
                await context.bot.send_message(referrer_id, "üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
        except:
            logging.warning("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")

    user_agreements[user_id] = False
    agreement_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(agreement_text, reply_markup=InlineKeyboardMarkup(keyboard))

# === Agree ===
async def agree_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id in banned_users:
        await query.edit_message_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    user_agreements[user_id] = True
    await query.edit_message_text("‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    await show_main_menu(update, user_id)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def show_main_menu(update, user_id):
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    if update:
        await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        await app.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# === –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ===
async def show_interests_menu(update, user_id):
    keyboard = [[InlineKeyboardButton(interest, callback_data=f"interest_{interest}")] for interest in available_interests]
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=reply_markup)
    user_interests[user_id] = []

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ===
async def interests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    logging.info(f"[DEBUG] Callback received: {query.data} from user {user_id}")  # <-- DEBUG
    await query.answer()

    if query.data.startswith("interest_"):
        interest = query.data.replace("interest_", "")
        if interest in user_interests.get(user_id, []):
            user_interests[user_id].remove(interest)
        else:
            user_interests.setdefault(user_id, []).append(interest)

        keyboard = []
        for interest in available_interests:
            text = f"‚úÖ {interest}" if interest in user_interests.get(user_id, []) else interest
            keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{interest}")])
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "interests_done":
        await query.edit_message_text(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_interests.get(user_id, [])) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        waiting_users.append(user_id)

        job = context.application.job_queue.run_once(
            search_timeout_callback,
            120,
            chat_id=user_id,
            name=str(user_id)
        )
        search_timeouts[user_id] = job

        await find_partner(context)

# === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
# (–Ω–µ–∏–∑–º–µ–Ω–Ω—ã ‚Äî –≤—Å—ë –∫–∞–∫ —É –≤–∞—Å: referrals_command, message_handler, media_handler, find_partner, search_timeout_callback, handle_show_name_request, end_chat, admin_command, password_handler, show_admin_menu, admin_menu_handler)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5000))
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_error_handler(error_handler)

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery ===
    app.add_handler(CallbackQueryHandler(agree_callback, pattern='^agree$'))
    app.add_handler(CallbackQueryHandler(interests_callback, pattern='^(interest_.*|interests_done)$'))  # <-- FIXED

    # === –ö–æ–º–∞–Ω–¥—ã ===
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('admin', admin_command))

    # === –ê–¥–º–∏–Ω-–ø–∞—Ä–æ–ª—å ===
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(ADMIN_PASSWORD) & not_admin_filter, password_handler))

    # === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ===
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

    # === –ú–µ–¥–∏–∞ ===
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE | filters.Sticker.ALL, media_handler))

    # === Webhook-–∑–∞–ø—É—Å–∫ –¥–ª—è Render ===
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
    )
