from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.ext.filters import BaseFilter
import logging
import os
import sys

# ========== –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ==========
BOT_TOKEN      = os.environ.get('BOT_TOKEN')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD')
WEBHOOK_URL    = "https://test-1-1-zard.onrender.com"

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD")
    sys.exit(1)

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ ==========
ADMIN_IDS         = set()
waiting_users     = []
active_chats      = {}
show_name_requests= {}
user_agreements   = {}
banned_users      = set()
reported_users    = {}
search_timeouts   = {}
user_interests    = {}
available_interests = ["–ú—É–∑—ã–∫–∞", "–ò–≥—Ä—ã", "–ö–∏–Ω–æ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–ø–æ—Ä—Ç", "–ö–Ω–∏–≥–∏"]
referrals         = {}
invited_by        = {}

# ========== –ö–ê–°–¢–û–ú–ù–´–ô –§–ò–õ–¨–¢–† ==========
class NotAdminFilter(BaseFilter):
    def filter(self, message):
        return message.from_user.id not in ADMIN_IDS

not_admin_filter = NotAdminFilter()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: %s", context.error)

# ========== /start ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
    if context.args:
        try:
            ref = int(context.args[0])
            if ref != user_id and user_id not in invited_by:
                referrals.setdefault(ref, 0)
                referrals[ref] += 1
                invited_by[user_id] = ref
                await context.bot.send_message(ref, "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!")
        except:
            logging.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä")

    user_agreements[user_id] = False
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª:\n"
        "‚Ä¢ –ù–µ—Ç —Å–ø–∞–º–∞\n"
        "‚Ä¢ –£–≤–∞–∂–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
    )
    kb = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb))

# ========== agree ==========
async def agree_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid in banned_users:
        await q.edit_message_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    user_agreements[uid] = True
    await q.edit_message_text("‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")
    await show_main_menu(update, uid)

# ========== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ==========
async def show_main_menu(update, user_id):
    kb = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
    markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    if update:
        await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        await app.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# ========== –ú–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ==========
async def show_interests_menu(update, user_id):
    kb = [[InlineKeyboardButton(i, callback_data=f"interest_{i}")] for i in available_interests]
    kb.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=InlineKeyboardMarkup(kb))
    user_interests[user_id] = []

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ interest_* ==========
async def interests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    data = q.data

    logging.info(f"[CALLBACK] {uid=} {data=}")
    await q.answer()

    # –≤—ã–±–æ—Ä/—Å–Ω—è—Ç–∏–µ –º–µ—Ç–∫–∏
    if data.startswith("interest_"):
        interest = data.split("interest_",1)[1]
        lst = user_interests.setdefault(uid, [])
        if interest in lst:
            lst.remove(interest)
        else:
            lst.append(interest)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = []
        for i in available_interests:
            mark = "‚úÖ " if i in lst else ""
            kb.append([InlineKeyboardButton(mark + i, callback_data=f"interest_{i}")])
        kb.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
        await q.edit_message_reply_markup(InlineKeyboardMarkup(kb))

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ interests_done ==========
async def interests_done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    await q.answer()
    chosen = user_interests.get(uid, [])
    await q.edit_message_text(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(chosen) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò–¥—ë—Ç –ø–æ–∏—Å–∫...")
    waiting_users.append(uid)

    # —Ç–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞
    job = context.application.job_queue.run_once(
        search_timeout_callback, 120, chat_id=uid, name=str(uid)
    )
    search_timeouts[uid] = job

    await find_partner(context)

# ========== –ó–¥–µ—Å—å –∏–¥—É—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: 
# referrals_command, message_handler, media_handler, find_partner, 
# search_timeout_callback, handle_show_name_request, end_chat, admin_command, 
# password_handler, show_admin_menu, admin_menu_handler
# ================================================

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5000))
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_error_handler(error_handler)

    # üõé CallbackQueryHandlers
    app.add_handler(CallbackQueryHandler(agree_callback,              pattern='^agree$'))
    app.add_handler(CallbackQueryHandler(interests_callback,         pattern='^interest_'))
    app.add_handler(CallbackQueryHandler(interests_done_callback,    pattern='^interests_done$'))

    # üìå –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('admin', admin_command))

    # üîë –ê–¥–º–∏–Ω-–ø–∞—Ä–æ–ª—å
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(ADMIN_PASSWORD) & not_admin_filter, password_handler))

    # üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

    # üì∑ –ú–µ–¥–∏–∞
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE | filters.Sticker.ALL, media_handler))

    # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
    )
